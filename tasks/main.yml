---
# 0. Archive to S3 or Filesystem
- include_tasks: s3-archive.yml
  when: archive is defined and app_deploy_bucket is defined

- include_tasks: fs-archive.yml
  when: archive is defined and app_deploy_bucket is not defined

# 1. Unpack from S3 bucket or Filesystem
- include_tasks: s3-unpack.yml
  when: app_deploy_bucket is defined

- include_tasks: fs-unpack.yml
  when: app_deploy_bucket is not defined

# 2. Setup `logs` and `tmp` dirs, configure apps and execute migrations
- name: ensure app `logs` directory exists
  become: yes
  become_user: root
  file:
    path: "{{ app_logs_path }}/{{ item.key }}"
    state: directory
    owner: "{{ app_deploy_user }}"
    mode: 0755
  with_dict: "{{ apps }}"

- name: ensure app `tmp` directory exists
  become: yes
  become_user: root
  file:
    path: "{{ app_tmp_path }}/{{ item.key }}"
    state: directory
    owner: "{{ app_deploy_user }}"
    mode: 0755
  with_dict: "{{ apps }}"

- name: setup `config` and `webroot` files
  include_tasks: config.yml
  with_dict: "{{ apps }}"
  loop_control:
    loop_var: app

- name: set deploy path owner recursively
  become: yes
  file:
    path: "{{ item.value.deploy_path }}"
    owner: "{{ app_deploy_user }}"
    group: "{{ app_deploy_user }}"
    recurse: yes
  with_dict: "{{ apps }}"

- name: perform migrations
  include_tasks: migrations.yml

- name: optional pre-deploy commands, from deploy path
  become: yes
  shell: "{{ item.value.pre_deploy }}"
  args:
    chdir: "{{ item.value.deploy_path }}"
  when: item.value.pre_deploy is defined
  with_dict: "{{ apps }}"

# 3. Check target document root app folder: MUST be a symlink
- name: check the current symlink
  stat: path="{{ app_base_path }}/{{ item.key }}"
  register: prev_app_paths
  with_dict: "{{ apps }}"

- name: remove the folder (only if it is a folder)
  file:
    path: "{{ item.stat.path }}"
    state: absent
  when: item.stat.isdir is defined and item.stat.isdir
  with_items: "{{ prev_app_paths.results }}"

# 4. Move symlink to newly deployed folder
- name: update app symlink to deploy folder
  become: yes
  file:
    src: "{{ item.value.deploy_path }}"
    dest: "{{ app_base_path }}/{{ item.key }}"
    owner: "{{ app_deploy_user }}"
    state: link
  with_dict: "{{ apps }}"

- name: empty cache
  become: yes
  become_user: "{{ app_user }}"
  command: bin/cake cache clear_all
  args:
    chdir: "{{ app_base_path }}/{{ item.key }}"
  with_dict: "{{ apps }}"

# 5. Remove previous link target (may be restored from package in S3)
- name: register new app paths
  stat: path="{{ app_base_path }}/{{ item.key }}"
  register: new_app_paths
  with_dict: "{{ apps }}"

- name: remove previous deploy target, if changed
  become: yes
  file:
    path: "{{ item[0].stat.lnk_target }}"
    state: absent
  when: (item.0.stat.islnk is defined) and (item.0.item.key == item.1.item.key) and item.0.stat.islnk and (item.1.stat.lnk_target != item.0.stat.lnk_target)
  loop: "{{ prev_app_paths.results|product(new_app_paths.results)|list }}"

